@page "/MisDatos"
@inject SesionUsuario Sesion
@inject UsuarioModificacionUseCase ModificarUsuario
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Mis Datos</h3>

@if (!string.IsNullOrWhiteSpace(mensajeError))
{
    <div class="alert alert-danger">@mensajeError</div>
}

@if (!string.IsNullOrWhiteSpace(mensajeExito))
{
    <div class="alert alert-success">@mensajeExito</div>
}

@if (usuario is null)
{
    <p>Debés iniciar sesión para ver tus datos.</p>
}
else if (!modoEdicion)
{
    <div class="card p-3">
        <p><strong>Nombre:</strong> @usuario.Nombre</p>
        <p><strong>Apellido:</strong> @usuario.Apellido</p>
        <p><strong>Email:</strong> @usuario.Email</p>

        <button class="btn btn-primary mt-3" @onclick="IniciarEdicion">Modificar Datos</button>
    </div>
}
else
{
    <EditForm Model="@usuarioEditado" OnValidSubmit="GuardarCambios">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Nombre</label>
            <InputText class="form-control" @bind-Value="usuarioEditado.Nombre" />
        </div>

        <div class="mb-3">
            <label class="form-label">Apellido</label>
            <InputText class="form-control" @bind-Value="usuarioEditado.Apellido" />
        </div>

        <div class="mb-3">
            <label class="form-label">Email</label>
            <InputText class="form-control" @bind-Value="usuarioEditado.Email" />
        </div>

        <button type="submit" class="btn btn-success">Guardar</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="CancelarEdicion">Cancelar</button>
    </EditForm>
}

@code {
    private Usuario? usuario;
    private Usuario? usuarioEditado;
    private bool modoEdicion = false;
    private string mensajeError = "";
    private string mensajeExito = "";

    protected override void OnInitialized()
    {
        usuario = Sesion.Usuario;
        CrearUsuarioEditado();
    }

    private void CrearUsuarioEditado()
    {
        if (usuario is not null)
        {
            usuarioEditado = new Usuario
            {
                Id = usuario.Id,
                Nombre = usuario.Nombre,
                Apellido = usuario.Apellido,
                Email = usuario.Email,
                PasswordHash = usuario.PasswordHash,
                Permisos = new List<Permiso>(usuario.Permisos)
            };
        }
    }

    private void IniciarEdicion()
    {
        modoEdicion = true;
        mensajeError = "";
        mensajeExito = "";
        CrearUsuarioEditado(); // Recrear el objeto editado con los datos actuales
    }

    private void CancelarEdicion()
    {
        modoEdicion = false;
        mensajeError = "";
        mensajeExito = "";
        CrearUsuarioEditado(); // Restaurar los datos originales
    }

    private void GuardarCambios()
    {
        mensajeError = "";
        mensajeExito = "";

        try
        {
            if (usuario is null || usuarioEditado is null)
            {
                mensajeError = "Error: No se pudo obtener la información del usuario.";
                return;
            }

            // Ejecutar la modificación
            ModificarUsuario.Ejecutar(usuario.Id, usuario.Id, usuarioEditado);

            // Actualizar la sesión con los nuevos datos
            Sesion.ActualizarUsuario(usuarioEditado);
            
            // Actualizar la variable local
            usuario = usuarioEditado;
            
            // Salir del modo edición
            modoEdicion = false;
            
            // Mostrar mensaje de éxito
            mensajeExito = "Datos actualizados correctamente.";
        }
        catch (FalloAutorizacionException ex)
        {
            mensajeError = ex.Message;
        }
        catch (EntidadNotFoundException ex)
        {
            mensajeError = ex.Message;
        }
        catch (ValidacionException ex)
        {
            mensajeError = ex.Message;
        }
        catch (Exception ex)
        {
            mensajeError = "Error inesperado: " + ex.Message;
        }
    }
}
