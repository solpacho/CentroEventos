@page "/Login"
@rendermode InteractiveServer
@inject SesionUsuario Sesion

@implements IDisposable

<h3>Iniciar sesión</h3>

@if (!Sesion.EstaLogueado)
{
    <EditForm Model="@modelo" OnValidSubmit="IniciarSesion">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="email">Email:</label>
            <InputText
                id="email"
                class="form-control"
                @bind-Value="modelo.Email" />
            <ValidationMessage For="@(() => modelo.Email)" />
        </div>

        <div class="mb-3">
            <label for="contrasenia">Contraseña:</label>
            <InputText
                id="contrasenia"
                type="password"
                class="form-control"
                @bind-Value="modelo.Contrasenia" />
            <ValidationMessage For="@(() => modelo.Contrasenia)" />
        </div>

        <button class="btn btn-primary" type="submit">Iniciar Sesión</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="alert alert-danger mt-3">@mensaje</div>
    }
}
else
{
    <div class="alert alert-success">
        Bienvenido, @Sesion.Usuario!.Nombre. <br />
        <NavLink href="/Inicio">Ir a la página principal</NavLink>
    </div>
}

@code {
    private LoginModel modelo { get; set; } = new();
    private string mensaje = "";

    protected override void OnInitialized()
    {
        Sesion.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        Sesion.OnChange -= StateHasChanged;
    }

    private void IniciarSesion()
    {
        try
        {
            Sesion.IniciarSesion(modelo.Email!, modelo.Contrasenia!);
            // Al cambiar Sesion.EstaLogueado, StateHasChanged se invocará automáticamente
        }
        catch (Exception ex)
        {
            mensaje = ex.Message;
        }
    }
}
