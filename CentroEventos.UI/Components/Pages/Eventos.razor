@page "/eventos"
@inject ListarEventosUseCase ObtenerEventosUseCase
@inject EventoDeportivoAltaUseCase AltaEventoUseCase
@inject EventoDeportivoModificacionUseCase ModificacionEventoUseCase
@inject EventoDeportivoBajaUseCase BajaEventoUseCase
@inject SesionUsuario Sesion
@inject IServicioAutorizacion ServicioAutorizacion
@using CentroEventos.UI;
@rendermode InteractiveServer

<h3>Eventos</h3>

@if (usuario is null)
{
    <p>Debés iniciar sesión para ver los eventos.</p>
}
else if (eventos is null)
{
    <p>No existen eventos.</p>
}
else
{
    if (tienePermisoEventoAlta)
    {
        <button class="btn btn-success mb-3" @onclick="() => mostrarFormEvento = true">Nuevo Evento</button>
    }

    <!-- Formulario para crear evento -->
    if (mostrarFormEvento)
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5>Crear Nuevo Evento</h5>
            </div>
            <div class="card-body">
                <EditForm Model="@nuevoEvento" OnValidSubmit="CrearEvento">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    @if (!string.IsNullOrWhiteSpace(mensajeError))
                    {
                        <div class="alert alert-danger">@mensajeError</div>
                    }
                    <div class="mb-2">
                        <label>Nombre:</label>
                        <InputText @bind-Value="nuevoEvento.Nombre" class="form-control" />
                    </div>
                    <div class="mb-2">
                        <label>Descripción:</label>
                        <InputText @bind-Value="nuevoEvento.Descripcion" class="form-control" />
                    </div>
                    <div class="mb-2">
                        <label>Fecha y hora de inicio:</label>
                        <InputDate @bind-Value="nuevoEvento.FechaHoraInicio" class="form-control" />
                    </div>
                    <div class="mb-2">
                        <label>Duración (horas):</label>
                        <InputNumber @bind-Value="nuevoEvento.DuracionHoras" class="form-control" />
                    </div>
                    <div class="mb-2">
                        <label>Cupo máximo:</label>
                        <InputNumber @bind-Value="nuevoEvento.CupoMaximo" class="form-control" />
                    </div>
                    <div class="mb-2">
                        <label>ID del responsable:</label>
                        <InputNumber @bind-Value="nuevoEvento.ResponsableId" class="form-control" />
                    </div>
                    <button type="submit" class="btn btn-primary">Guardar</button>
                    <button type="button" class="btn btn-secondary ms-2" @onclick="CancelarFormEvento">Cancelar</button>
                </EditForm>
            </div>
        </div>
    }

    <!-- Formulario para modificar evento -->
    if (mostrarFormModificacion && eventoEnModificacion != null)
    {
        <div class="card mb-4">
            <div class="card-header">
                <h5>Modificar Evento</h5>
            </div>
            <div class="card-body">
                <EditForm Model="@eventoEnModificacion" OnValidSubmit="ModificarEvento">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    @if (!string.IsNullOrWhiteSpace(mensajeError))
                    {
                        <div class="alert alert-danger">@mensajeError</div>
                    }
                    <div class="mb-2">
                        <label>Nombre:</label>
                        <InputText @bind-Value="eventoEnModificacion.Nombre" class="form-control" />
                    </div>
                    <div class="mb-2">
                        <label>Descripción:</label>
                        <InputText @bind-Value="eventoEnModificacion.Descripcion" class="form-control" />
                    </div>
                    <div class="mb-2">
                        <label>Fecha y hora de inicio:</label>
                        <InputDate @bind-Value="eventoEnModificacion.FechaHoraInicio" class="form-control" />
                    </div>
                    <div class="mb-2">
                        <label>Duración (horas):</label>
                        <InputNumber @bind-Value="eventoEnModificacion.DuracionHoras" class="form-control" />
                    </div>
                    <div class="mb-2">
                        <label>Cupo máximo:</label>
                        <InputNumber @bind-Value="eventoEnModificacion.CupoMaximo" class="form-control" />
                    </div>
                    <div class="mb-2">
                        <label>ID del responsable:</label>
                        <InputNumber @bind-Value="eventoEnModificacion.ResponsableId" class="form-control" />
                    </div>
                    <button type="submit" class="btn btn-primary">Guardar Cambios</button>
                    <button type="button" class="btn btn-secondary ms-2" @onclick="CancelarModificacion">Cancelar</button>
                </EditForm>
            </div>
        </div>
    }

    <!-- Lista de eventos -->
    foreach (var evento in eventos)
    {
        <div class="card mb-3 p-3 border">
            <div>
                <strong>@evento.Nombre</strong> |
                <strong>Fecha:</strong> @evento.FechaHoraInicio.ToString("dd/MM/yyyy HH:mm") |
                <strong>Duración:</strong> @evento.DuracionHoras hora(s) |
                <strong>Cupo:</strong> @evento.CupoMaximo personas |
                <strong>Responsable ID:</strong> @evento.ResponsableId
            </div>
            <div>
                <em>@evento.Descripcion</em>
            </div>
            <div class="mt-2">
                @if (tienePermisoEventoModificacion)
                {
                    <button class="btn btn-primary me-2" @onclick="() => IniciarModificacion(evento)">Modificar</button>
                }
                @if (tienePermisoEventoBaja)
                {
                    @if (eventoAEliminar == evento.Id)
                    {
                        <div class="d-inline">
                            <span class="text-danger me-2">¿Confirmar eliminación?</span>
                            <button class="btn btn-danger btn-sm me-1" @onclick="ConfirmarEliminacion">Sí</button>
                            <button class="btn btn-secondary btn-sm" @onclick="CancelarEliminacion">No</button>
                        </div>
                    }
                    else
                    {
                        <button class="btn btn-danger" @onclick="() => PrepararEliminacion(evento.Id)">Eliminar</button>
                    }
                }
            </div>
        </div>
    }
    
    <!-- Mensajes de error globales -->
    @if (!string.IsNullOrWhiteSpace(mensajeError))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @mensajeError
            <button type="button" class="btn-close" @onclick="() => mensajeError = string.Empty"></button>
        </div>
    }
}

@code {
    private List<EventoDeportivo>? eventos;
    private Usuario? usuario;
    private bool tienePermisoEventoAlta;
    private bool tienePermisoEventoBaja;
    private bool tienePermisoEventoModificacion;

    // Para crear evento
    private bool mostrarFormEvento = false;
    private EventoAltaModel nuevoEvento = new();
    
    // Para modificar evento
    private bool mostrarFormModificacion = false;
    private EventoModificacionModel? eventoEnModificacion;
    
    // Para eliminar evento
    private int eventoAEliminar = 0;
    
    private string mensajeError = "";

    protected override void OnInitialized()
    {
        usuario = Sesion.Usuario;

        if (usuario is null)
            return;

        eventos = ObtenerEventosUseCase.Ejecutar();

        tienePermisoEventoAlta = ServicioAutorizacion.PoseeElPermiso(usuario.Id, Permiso.EventoAlta);
        tienePermisoEventoBaja = ServicioAutorizacion.PoseeElPermiso(usuario.Id, Permiso.EventoBaja);
        tienePermisoEventoModificacion = ServicioAutorizacion.PoseeElPermiso(usuario.Id, Permiso.EventoModificacion);
    }

    private void CancelarFormEvento()
    {
        mostrarFormEvento = false;
        eventoAEliminar = 0;
        mensajeError = "";
        nuevoEvento = new();
    }

    private void IniciarModificacion(EventoDeportivo evento)
    {
        try
        {
            // Ocultar otros formularios y limpiar estados
            mostrarFormEvento = false;
            eventoAEliminar = 0;
            mensajeError = "";
            
            // Configurar modificación
            eventoEnModificacion = new EventoModificacionModel(evento);
            mostrarFormModificacion = true;
        }
        catch (Exception ex)
        {
            mensajeError = "Error al iniciar modificación: " + ex.Message;
        }
    }

    private void CancelarModificacion()
    {
        mostrarFormModificacion = false;
        eventoEnModificacion = null;
        eventoAEliminar = 0;
        mensajeError = "";
    }

    private void CrearEvento()
    {
        mensajeError = "";
        try
        {
            if (usuario is null)
            {
                mensajeError = "Debe iniciar sesión para agregar eventos.";
                return;
            }

            var evento = new EventoDeportivo(
                nuevoEvento.Nombre!,
                nuevoEvento.CupoMaximo,
                nuevoEvento.ResponsableId,
                nuevoEvento.DuracionHoras,
                nuevoEvento.FechaHoraInicio,
                nuevoEvento.Descripcion!
            );

            AltaEventoUseCase.Ejecutar(evento, usuario.Id);

            // Refresca la lista de eventos
            eventos = ObtenerEventosUseCase.Ejecutar();

            mostrarFormEvento = false;
            eventoAEliminar = 0;
            nuevoEvento = new();
        }
        catch (FalloAutorizacionException ex)
        {
            mensajeError = ex.Message;
        }
        catch (ValidacionException ex)
        {
            mensajeError = ex.Message;
        }
        catch (Exception ex)
        {
            mensajeError = "Error inesperado: " + ex.Message;
        }
    }

    private void ModificarEvento()
    {
        mensajeError = "";
        try
        {
            if (usuario is null)
            {
                mensajeError = "Debe iniciar sesión para modificar eventos.";
                return;
            }

            if (eventoEnModificacion is null)
            {
                mensajeError = "Error: no se encontró el evento a modificar.";
                return;
            }

            var evento = new EventoDeportivo(
                eventoEnModificacion.Nombre,
                eventoEnModificacion.CupoMaximo,
                eventoEnModificacion.ResponsableId,
                eventoEnModificacion.DuracionHoras,
                eventoEnModificacion.FechaHoraInicio,
                eventoEnModificacion.Descripcion ?? ""
            );
            
            // Asignar el ID del evento existente
            evento.Id = eventoEnModificacion.Id;

            ModificacionEventoUseCase.Ejecutar(evento, usuario.Id);

            // Refresca la lista de eventos
            eventos = ObtenerEventosUseCase.Ejecutar();

            mostrarFormModificacion = false;
            eventoEnModificacion = null;
            eventoAEliminar = 0;
        }
        catch (FalloAutorizacionException ex)
        {
            mensajeError = ex.Message;
        }
        catch (ValidacionException ex)
        {
            mensajeError = ex.Message;
        }
        catch (EntidadNotFoundException ex)
        {
            mensajeError = ex.Message;
        }
        catch (Exception ex)
        {
            mensajeError = "Error inesperado: " + ex.Message;
        }
    }

    private void PrepararEliminacion(int idEvento)
    {
        eventoAEliminar = idEvento;
        mensajeError = "";
    }

    private void CancelarEliminacion()
    {
        eventoAEliminar = 0;
        mensajeError = "";
    }

    private void ConfirmarEliminacion()
    {
        mensajeError = "";
        try
        {
            if (usuario is null)
            {
                mensajeError = "Debe iniciar sesión para eliminar eventos.";
                return;
            }

            if (eventoAEliminar == 0)
            {
                mensajeError = "Error: no se encontró el evento a eliminar.";
                return;
            }

            BajaEventoUseCase.Ejecutar(eventoAEliminar, usuario.Id);

            // Refresca la lista de eventos
            eventos = ObtenerEventosUseCase.Ejecutar();

            eventoAEliminar = 0;
        }
        catch (FalloAutorizacionException ex)
        {
            mensajeError = ex.Message;
        }
        catch (OperacionInvalidaException ex)
        {
            mensajeError = ex.Message;
        }
        catch (EntidadNotFoundException ex)
        {
            mensajeError = ex.Message;
        }
        catch (Exception ex)
        {
            mensajeError = "Error inesperado: " + ex.Message;
        }
    }
}
