@page "/reservas"
@inject ListarReservasUseCase ObtenerReservasUseCase
@inject ReservaAltaUseCase AltaReservaUseCase
@inject ReservaModificacionUseCase ModificacionReservaUseCase
@inject ReservaBajaUseCase BajaReservaUseCase
@inject SesionUsuario Sesion
@inject IServicioAutorizacion ServicioAutorizacion
@rendermode InteractiveServer

<h3>Reservas</h3>

@if (usuario is null)
{
    <p>Debés iniciar sesión para ver las reservas.</p>
}
else if (reservas is null)
{
    <p>Cargando reservas...</p>
}
else
{
    if (tienePermisoReservaAlta)
    {
        <button class="btn btn-success mb-3" @onclick="() => mostrarFormReserva = true">Nueva Reserva</button>
    }

    @if (mostrarFormReserva)
    {
        <EditForm Model="@nuevaReserva" OnValidSubmit="CrearReserva">
            <DataAnnotationsValidator />
            @if (!string.IsNullOrWhiteSpace(mensajeError))
            {
                <div class="alert alert-danger">
                    @mensajeError
                </div>
            }
            <div class="mb-2">
                <label>ID Persona:</label>
                <InputNumber @bind-Value="nuevaReserva.PersonaId" class="form-control" />
            </div>
            <div class="mb-2">
                <label>ID Evento:</label>
                <InputNumber @bind-Value="nuevaReserva.EventoDeportivoId" class="form-control" />
            </div>
            <button type="submit" class="btn btn-primary">Guardar</button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="CancelarFormReserva">Cancelar</button>
        </EditForm>
    }

    @if (mostrarFormModificacion)
    {
        <div class="card mb-3 p-3 border border-primary">
            <h5>Modificar Reserva</h5>
            <EditForm Model="@reservaModificacion" OnValidSubmit="ModificarReserva">
                <DataAnnotationsValidator />
                @if (!string.IsNullOrWhiteSpace(mensajeErrorModificacion))
                {
                    <div class="alert alert-danger">
                        @mensajeErrorModificacion
                    </div>
                }
                <div class="mb-2">
                    <label>ID Persona (no modificable):</label>
                    <input type="number" value="@reservaModificacion.PersonaId" class="form-control" disabled />
                </div>
                <div class="mb-2">
                    <label>ID Evento:</label>
                    <InputNumber @bind-Value="reservaModificacion.EventoDeportivoId" class="form-control" />
                </div>
                <div class="mb-2">
                    <label>Estado:</label>
                    <InputSelect @bind-Value="reservaModificacion.Estado" class="form-control">
                        <option value="@EstadoAsistencia.Pendiente">Pendiente</option>
                        <option value="@EstadoAsistencia.Presente">Presente</option>
                        <option value="@EstadoAsistencia.Ausente">Ausente</option>
                    </InputSelect>
                </div>
                <button type="submit" class="btn btn-primary">Guardar Cambios</button>
                <button type="button" class="btn btn-secondary ms-2" @onclick="CancelarModificacion">Cancelar</button>
            </EditForm>
        </div>
    }

    @foreach (var reserva in reservas)
    {
        <div class="card mb-3 p-3 border">
            <p><strong>ID del Evento:</strong> @reserva.EventoDeportivoId</p>
            <p><strong>ID del Usuario:</strong> @reserva.PersonaId</p>
            <p><strong>Fecha de Reserva:</strong> @reserva.FechaAltaReserva.ToString("dd/MM/yyyy")</p>
            <p><strong>Estado:</strong> @reserva.Estado</p>

            @if (tienePermisoReservaModificacion)
            {
                <button class="btn btn-primary me-2" @onclick="() => IniciarModificacion(reserva)">Modificar</button>
            }
            @if (tienePermisoReservaBaja)
            {
                <button class="btn btn-danger" @onclick="() => EliminarReserva(reserva.Id)">Eliminar</button>
            }
        </div>
    }
}

@code {
    private List<Reserva>? reservas;
    private Usuario? usuario;

    private bool tienePermisoReservaAlta;
    private bool tienePermisoReservaBaja;
    private bool tienePermisoReservaModificacion;

    private bool mostrarFormReserva = false;
    private bool mostrarFormModificacion = false;
    private string mensajeError = "";
    private string mensajeErrorModificacion = "";

    private ReservaAltaModel nuevaReserva = new();
    private ReservaModificacionModel reservaModificacion = new();

    protected override void OnInitialized()
    {
        usuario = Sesion.Usuario;

        if (usuario is null)
            return;

        CargarReservasYPermisos();
    }

    private void CargarReservasYPermisos()
    {
        reservas = ObtenerReservasUseCase.Ejecutar();
        tienePermisoReservaAlta = ServicioAutorizacion.PoseeElPermiso(usuario!.Id, Permiso.ReservaAlta);
        tienePermisoReservaBaja = ServicioAutorizacion.PoseeElPermiso(usuario!.Id, Permiso.ReservaBaja);
        tienePermisoReservaModificacion = ServicioAutorizacion.PoseeElPermiso(usuario!.Id, Permiso.ReservaModificacion);
    }

    private void CancelarFormReserva()
    {
        mostrarFormReserva = false;
        mensajeError = "";
        nuevaReserva = new();
    }

    private void CrearReserva()
    {
        mensajeError = "";
        try
        {
            var reserva = new Reserva
            {
                PersonaId = nuevaReserva.PersonaId,
                EventoDeportivoId = nuevaReserva.EventoDeportivoId,
                FechaAltaReserva = DateTime.Now,
                Estado = nuevaReserva.Estado
            };

            AltaReservaUseCase.Ejecutar(reserva, usuario!.Id);

            mostrarFormReserva = false;
            nuevaReserva = new();
            CargarReservasYPermisos();
        }
        catch (FalloAutorizacionException ex)
        {
            mensajeError = ex.Message;
        }
        catch (EntidadNotFoundException ex)
        {
            mensajeError = ex.Message;
        }
        catch (DuplicadoException ex)
        {
            mensajeError = ex.Message;
        }
        catch (CupoExcedidoException ex)
        {
            mensajeError = ex.Message;
        }
        catch (Exception ex)
        {
            mensajeError = "Error inesperado: " + ex.Message;
        }
    }

    private void IniciarModificacion(Reserva reserva)
    {
        mostrarFormModificacion = true;
        mostrarFormReserva = false; // Ocultar form de nueva reserva si está abierto
        mensajeErrorModificacion = "";
        
        // Cargar los datos actuales de la reserva en el modelo de modificación
        reservaModificacion = new ReservaModificacionModel
        {
            Id = reserva.Id,
            PersonaId = reserva.PersonaId,
            EventoDeportivoId = reserva.EventoDeportivoId,
            FechaAltaReserva = reserva.FechaAltaReserva,
            Estado = reserva.Estado
        };
    }

    private void CancelarModificacion()
    {
        mostrarFormModificacion = false;
        mensajeErrorModificacion = "";
        reservaModificacion = new();
    }

    private void ModificarReserva()
    {
        mensajeErrorModificacion = "";
        try
        {
            var reserva = new Reserva
            {
                Id = reservaModificacion.Id,
                PersonaId = reservaModificacion.PersonaId,
                EventoDeportivoId = reservaModificacion.EventoDeportivoId,
                FechaAltaReserva = reservaModificacion.FechaAltaReserva,
                Estado = reservaModificacion.Estado
            };

            ModificacionReservaUseCase.Ejecutar(reserva, usuario!.Id);

            mostrarFormModificacion = false;
            reservaModificacion = new();
            CargarReservasYPermisos(); // Recargar la lista
        }
        catch (FalloAutorizacionException ex)
        {
            mensajeErrorModificacion = ex.Message;
        }
        catch (EntidadNotFoundException ex)
        {
            mensajeErrorModificacion = ex.Message;
        }
        catch (Exception ex)
        {
            mensajeErrorModificacion = "Error inesperado: " + ex.Message;
        }
    }

    private void EliminarReserva(int idReserva)
    {
        try
        {
            BajaReservaUseCase.Ejecutar(idReserva, usuario!.Id);
            CargarReservasYPermisos(); // Recargar la lista después de eliminar
        }
        catch (FalloAutorizacionException ex)
        {
            mensajeError = ex.Message;
        }
        catch (EntidadNotFoundException ex)
        {
            mensajeError = ex.Message;
        }
        catch (Exception ex)
        {
            mensajeError = "Error inesperado: " + ex.Message;
        }
    }
}
