@page "/reservas"
@inject ListarReservasUseCase ObtenerReservasUseCase
@inject ReservaAltaUseCase AltaReservaUseCase
@inject SesionUsuario Sesion
@inject IServicioAutorizacion ServicioAutorizacion
@rendermode InteractiveServer

<h3>Reservas</h3>

@if (usuario is null)
{
    <p>Debés iniciar sesión para ver las reservas.</p>
}
else if (reservas is null)
{
    <p>Cargando reservas...</p>
}
else
{
    if (tienePermisoReservaAlta)
    {
        <button class="btn btn-success mb-3" @onclick="() => mostrarFormReserva = true">Nueva Reserva</button>
    }

    @if (mostrarFormReserva)
    {
        <EditForm Model="@nuevaReserva" OnValidSubmit="CrearReserva">
            <DataAnnotationsValidator />
            @if (!string.IsNullOrWhiteSpace(mensajeError))
            {
                <div class="alert alert-danger">
                    @mensajeError
                </div>
            }
            <div class="mb-2">
                <label>ID Persona:</label>
                <InputNumber @bind-Value="nuevaReserva.PersonaId" class="form-control" />
            </div>
            <div class="mb-2">
                <label>ID Evento:</label>
                <InputNumber @bind-Value="nuevaReserva.EventoDeportivoId" class="form-control" />
            </div>
            <!-- Si quieres permitir elegir estado, descomenta esto:
            <div class="mb-2">
                <label>Estado:</label>
                <InputSelect @bind-Value="nuevaReserva.Estado" class="form-control">
                    @foreach (var estado in Enum.GetValues(typeof(EstadoAsistencia)))
                    {
                        <option value="@((int)estado)">@estado</option>
                    }
                </InputSelect>
            </div>
            -->
            <button type="submit" class="btn btn-primary">Guardar</button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="CancelarFormReserva">Cancelar</button>
        </EditForm>
    }

    @foreach (var reserva in reservas)
    {
        <div class="card mb-3 p-3 border">
            <p><strong>ID del Evento:</strong> @reserva.EventoDeportivoId</p>
            <p><strong>ID del Usuario:</strong> @reserva.PersonaId</p>
            <p><strong>Fecha de Reserva:</strong> @reserva.FechaAltaReserva.ToString("dd/MM/yyyy")</p>
            <p><strong>Estado:</strong> @reserva.Estado</p>

            @if (tienePermisoReservaModificacion)
            {
                <button class="btn btn-primary me-2">Modificar</button>
            }
            @if (tienePermisoReservaBaja)
            {
                <button class="btn btn-danger">Eliminar</button>
            }
        </div>
    }
}

@code {
    private List<Reserva>? reservas;
    private Usuario? usuario;

    private bool tienePermisoReservaAlta;
    private bool tienePermisoReservaBaja;
    private bool tienePermisoReservaModificacion;

    private bool mostrarFormReserva = false;
    private string mensajeError = "";

    private ReservaAltaModel nuevaReserva = new();

    protected override void OnInitialized()
    {
        usuario = Sesion.Usuario;

        if (usuario is null)
            return;

        CargarReservasYPermisos();
    }

    private void CargarReservasYPermisos()
    {
        reservas = ObtenerReservasUseCase.Ejecutar();
        tienePermisoReservaAlta = ServicioAutorizacion.PoseeElPermiso(usuario!.Id, Permiso.ReservaAlta);
        tienePermisoReservaBaja = ServicioAutorizacion.PoseeElPermiso(usuario!.Id, Permiso.ReservaBaja);
        tienePermisoReservaModificacion = ServicioAutorizacion.PoseeElPermiso(usuario!.Id, Permiso.ReservaModificacion);
    }

    private void CancelarFormReserva()
    {
        mostrarFormReserva = false;
        mensajeError = "";
        nuevaReserva = new();
    }

    private void CrearReserva()
    {
        mensajeError = "";
        try
        {
            var reserva = new Reserva
            {
                PersonaId = nuevaReserva.PersonaId,
                EventoDeportivoId = nuevaReserva.EventoDeportivoId,
                FechaAltaReserva = DateTime.Now,
                Estado = nuevaReserva.Estado // o EstadoAsistencia.Pendiente si no expones el campo en el form
            };

            AltaReservaUseCase.Ejecutar(reserva, usuario!.Id);

            mostrarFormReserva = false;
            nuevaReserva = new();
            CargarReservasYPermisos();
        }
        catch (FalloAutorizacionException ex)
        {
            mensajeError = ex.Message;
        }
        catch (EntidadNotFoundException ex)
        {
            mensajeError = ex.Message;
        }
        catch (DuplicadoException ex)
        {
            mensajeError = ex.Message;
        }
        catch (CupoExcedidoException ex)
        {
            mensajeError = ex.Message;
        }
        catch (Exception ex)
        {
            mensajeError = "Error inesperado: " + ex.Message;
        }
    }
}
